openapi: 3.0.1
info:
  title: Neptune's Dashboard
  contact:
    email: JonahJ@datacom.co.nz
  version: "2"
servers:
  - url: https://neptunes-dashboard.bitcloud.nz
tags:
  - name: Game
    description: Game Information
  - name: Player
    description: Player Information
  - name: Team
    description: Team Information
paths:
  /api/game:
    get:
      tags:
        - Game
      summary: Gets All Games
      operationId: getGames
      parameters:
        - name: name
          in: query
          description: Filter by name
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Game'
        404:
          description: No Games Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/games/latest:
    get:
      tags:
        - Game
      summary: Get Latest Game
      operationId: getLatestGame
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        404:
          description: No Games Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/games/{ID}:
    get:
      tags:
        - Game
      summary: Get Game by ID
      operationId: getGameByID
      parameters:
        - name: ID
          in: path
          description: ID of Game to return
          required: true
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        404:
          description: No Game Found with that ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Game
      summary: Update Game
      operationId: updateGame
      parameters:
        - name: ID
          in: path
          description: ID of Game to update
          required: true
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Game'
        401:
          description: Not Authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No Game Found with that ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuth: []
  /api/{gameID}/players:
    get:
      tags:
        - Player
      summary: Gets All Players from Game with ID or latest Game
      operationId: getPlayers
      parameters:
        - name: gameID
          in: path
          description: ID of Game to get Players from
          required: true
          schema:
            type: number
        - name: alias
          in: query
          description: Filter by alias
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Player'
        404:
          description: No Players Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/players/{ID}:
    get:
      tags:
        - Player
      summary: Get Player by ID
      operationId: getPlayerByID
      parameters:
        - name: ID
          in: path
          description: ID of Player to return
          required: true
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        404:
          description: No Player Found with that ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Player
      summary: Update Player
      operationId: updatePlayer
      parameters:
        - name: ID
          in: path
          description: ID of Player to update
          required: true
          schema:
            type: number
      requestBody:
        description: "Name and team of player"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlayerRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Player'
        401:
          description: Not Authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No Player Found with that ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuth: []
  /api/{gameID}/teams:
    get:
      tags:
        - Team
      summary: Gets All Teams from Game with ID or latest Game
      operationId: getTeams
      parameters:
        - name: gameID
          in: path
          description: ID of Game to get Teams from
          required: true
          schema:
            type: number
        - name: name
          in: query
          description: Filter by name
          schema:
            type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Team'
        404:
          description: No Teams Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/teams/{ID}:
    get:
      tags:
        - Team
      summary: Get Team by ID
      operationId: getTeamByID
      parameters:
        - name: ID
          in: path
          description: ID of Team to return
          required: true
          schema:
            type: number
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        404:
          description: No Team Found with that ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put:
      tags:
        - Team
      summary: Update Team
      operationId: updateTeam
      parameters:
        - name: ID
          in: path
          description: ID of Team to update
          required: true
          schema:
            type: number
      requestBody:
        description: "Name of Team"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamRequest'
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Team'
        401:
          description: Not Authentication
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        404:
          description: No Team Found with that ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
      security:
        - BasicAuth: []
components:
  schemas:
    Game:
      type: object
      properties:
        ID:
          type: number
        name:
          type: string
        totalStars:
          type: integer
        victoryStars:
          type: integer
        productionRate:
          type: integer
        startTime:
          type: string
          format: date-time
        isGameOver:
          type: boolean
        isPaused:
          type: boolean
        isStarted:
          type: boolean
        tick:
          type: integer
        players:
          type: integer
        teams:
          type: integer
    Player:
      type: object
      properties:
        ID:
          type: integer
        alias:
          type: string
        name:
          type: string
          nullable: true
        game:
          type: number
        team:
          type: string
        turns:
          type: array
          items:
            $ref: '#/components/schemas/Turn'
    Turn:
      type: object
      properties:
        tick:
          type: integer
        player:
          type: integer
        economy:
          type: integer
        industry:
          type: integer
        science:
          type: integer
        stars:
          type: integer
        fleet:
          type: integer
        ships:
          type: integer
        isActive:
          type: boolean
        economyPerTurn:
          type: number
        industryPerTurn:
          type: number
        tech:
          type: object
          properties:
            scanning:
              type: integer
            hyperspace:
              type: integer
            terraforming:
              type: integer
            experimentation:
              type: integer
            weapons:
              type: integer
            banking:
              type: integer
            manufacturing:
              type: integer
    Team:
      type: object
      properties:
        ID:
          type: integer
        name:
          type: string
        game:
          type: number
        players:
          type: array
          items:
            type: integer
        totalEconomy:
          type: integer
        totalIndustry:
          type: integer
        totalScience:
          type: integer
        totalStars:
          type: integer
        totalFleet:
          type: integer
        totalShips:
          type: integer
    PlayerRequest:
      type: object
      properties:
        name:
          type: string
        team:
          type: string
      required:
        - name
    TeamRequest:
      type: object
      properties:
        name:
          type: string
      required:
        - name
    Error:
      type: object
      properties:
        request:
          type: string
        message:
          type: string
        code:
          type: object
          properties:
            value:
              type: integer
            description:
              type: string
        cause:
          type: array
          items:
            type: string
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
